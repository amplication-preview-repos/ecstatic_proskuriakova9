/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { PizzaService } from "../pizza.service";
import { PizzaCreateInput } from "./PizzaCreateInput";
import { Pizza } from "./Pizza";
import { PizzaFindManyArgs } from "./PizzaFindManyArgs";
import { PizzaWhereUniqueInput } from "./PizzaWhereUniqueInput";
import { PizzaUpdateInput } from "./PizzaUpdateInput";

export class PizzaControllerBase {
  constructor(protected readonly service: PizzaService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: Pizza })
  async createPizza(@common.Body() data: PizzaCreateInput): Promise<Pizza> {
    return await this.service.createPizza({
      data: data,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        price: true,
        description: true,
        ingredients: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [Pizza] })
  @ApiNestedQuery(PizzaFindManyArgs)
  async pizzas(@common.Req() request: Request): Promise<Pizza[]> {
    const args = plainToClass(PizzaFindManyArgs, request.query);
    return this.service.pizzas({
      ...args,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        price: true,
        description: true,
        ingredients: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: Pizza })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async pizza(
    @common.Param() params: PizzaWhereUniqueInput
  ): Promise<Pizza | null> {
    const result = await this.service.pizza({
      where: params,
      select: {
        id: true,
        createdAt: true,
        updatedAt: true,
        name: true,
        price: true,
        description: true,
        ingredients: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: Pizza })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updatePizza(
    @common.Param() params: PizzaWhereUniqueInput,
    @common.Body() data: PizzaUpdateInput
  ): Promise<Pizza | null> {
    try {
      return await this.service.updatePizza({
        where: params,
        data: data,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          price: true,
          description: true,
          ingredients: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: Pizza })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deletePizza(
    @common.Param() params: PizzaWhereUniqueInput
  ): Promise<Pizza | null> {
    try {
      return await this.service.deletePizza({
        where: params,
        select: {
          id: true,
          createdAt: true,
          updatedAt: true,
          name: true,
          price: true,
          description: true,
          ingredients: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
