/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Pizza } from "./Pizza";
import { PizzaCountArgs } from "./PizzaCountArgs";
import { PizzaFindManyArgs } from "./PizzaFindManyArgs";
import { PizzaFindUniqueArgs } from "./PizzaFindUniqueArgs";
import { CreatePizzaArgs } from "./CreatePizzaArgs";
import { UpdatePizzaArgs } from "./UpdatePizzaArgs";
import { DeletePizzaArgs } from "./DeletePizzaArgs";
import { PizzaService } from "../pizza.service";
@graphql.Resolver(() => Pizza)
export class PizzaResolverBase {
  constructor(protected readonly service: PizzaService) {}

  async _pizzasMeta(
    @graphql.Args() args: PizzaCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Pizza])
  async pizzas(@graphql.Args() args: PizzaFindManyArgs): Promise<Pizza[]> {
    return this.service.pizzas(args);
  }

  @graphql.Query(() => Pizza, { nullable: true })
  async pizza(
    @graphql.Args() args: PizzaFindUniqueArgs
  ): Promise<Pizza | null> {
    const result = await this.service.pizza(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Pizza)
  async createPizza(@graphql.Args() args: CreatePizzaArgs): Promise<Pizza> {
    return await this.service.createPizza({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Pizza)
  async updatePizza(
    @graphql.Args() args: UpdatePizzaArgs
  ): Promise<Pizza | null> {
    try {
      return await this.service.updatePizza({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Pizza)
  async deletePizza(
    @graphql.Args() args: DeletePizzaArgs
  ): Promise<Pizza | null> {
    try {
      return await this.service.deletePizza(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
